// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdslogic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UtilisatorClient is the client API for Utilisator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilisatorClient interface {
	GetUtilisation(ctx context.Context, in *UtilisationRequest, opts ...grpc.CallOption) (*UtilisationResponse, error)
	AddQuota(ctx context.Context, in *Quota, opts ...grpc.CallOption) (*QuotasSummary, error)
	DelQuota(ctx context.Context, in *QuotaId, opts ...grpc.CallOption) (*QuotasSummary, error)
}

type utilisatorClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilisatorClient(cc grpc.ClientConnInterface) UtilisatorClient {
	return &utilisatorClient{cc}
}

func (c *utilisatorClient) GetUtilisation(ctx context.Context, in *UtilisationRequest, opts ...grpc.CallOption) (*UtilisationResponse, error) {
	out := new(UtilisationResponse)
	err := c.cc.Invoke(ctx, "/sdslogic.Utilisator/GetUtilisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilisatorClient) AddQuota(ctx context.Context, in *Quota, opts ...grpc.CallOption) (*QuotasSummary, error) {
	out := new(QuotasSummary)
	err := c.cc.Invoke(ctx, "/sdslogic.Utilisator/AddQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilisatorClient) DelQuota(ctx context.Context, in *QuotaId, opts ...grpc.CallOption) (*QuotasSummary, error) {
	out := new(QuotasSummary)
	err := c.cc.Invoke(ctx, "/sdslogic.Utilisator/DelQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilisatorServer is the server API for Utilisator service.
// All implementations must embed UnimplementedUtilisatorServer
// for forward compatibility
type UtilisatorServer interface {
	GetUtilisation(context.Context, *UtilisationRequest) (*UtilisationResponse, error)
	AddQuota(context.Context, *Quota) (*QuotasSummary, error)
	DelQuota(context.Context, *QuotaId) (*QuotasSummary, error)
	mustEmbedUnimplementedUtilisatorServer()
}

// UnimplementedUtilisatorServer must be embedded to have forward compatible implementations.
type UnimplementedUtilisatorServer struct {
}

func (UnimplementedUtilisatorServer) GetUtilisation(context.Context, *UtilisationRequest) (*UtilisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUtilisation not implemented")
}
func (UnimplementedUtilisatorServer) AddQuota(context.Context, *Quota) (*QuotasSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuota not implemented")
}
func (UnimplementedUtilisatorServer) DelQuota(context.Context, *QuotaId) (*QuotasSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelQuota not implemented")
}
func (UnimplementedUtilisatorServer) mustEmbedUnimplementedUtilisatorServer() {}

// UnsafeUtilisatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilisatorServer will
// result in compilation errors.
type UnsafeUtilisatorServer interface {
	mustEmbedUnimplementedUtilisatorServer()
}

func RegisterUtilisatorServer(s grpc.ServiceRegistrar, srv UtilisatorServer) {
	s.RegisterService(&_Utilisator_serviceDesc, srv)
}

func _Utilisator_GetUtilisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtilisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilisatorServer).GetUtilisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdslogic.Utilisator/GetUtilisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilisatorServer).GetUtilisation(ctx, req.(*UtilisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utilisator_AddQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Quota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilisatorServer).AddQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdslogic.Utilisator/AddQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilisatorServer).AddQuota(ctx, req.(*Quota))
	}
	return interceptor(ctx, in, info, handler)
}

func _Utilisator_DelQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuotaId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilisatorServer).DelQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdslogic.Utilisator/DelQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilisatorServer).DelQuota(ctx, req.(*QuotaId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Utilisator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdslogic.Utilisator",
	HandlerType: (*UtilisatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUtilisation",
			Handler:    _Utilisator_GetUtilisation_Handler,
		},
		{
			MethodName: "AddQuota",
			Handler:    _Utilisator_AddQuota_Handler,
		},
		{
			MethodName: "DelQuota",
			Handler:    _Utilisator_DelQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sds.proto",
}
